trigger:
  branches:
    include:
      - dev
      - main

pool:
  name: goofy

jobs:
  - job: DevTasks
    displayName: 'Dev Branch Tasks: SonarQube, NuGet, and Publish'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
    steps:
    - checkout: self
      fetchDepth: 0

    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.x'  
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - task: NuGetToolInstaller@1
      displayName: 'Install NuGet Tool'
    
    - task: NuGetAuthenticate@1
      displayName: 'NuGet Authenticate'
      
    - task: SonarQubePrepare@6
      inputs:
        SonarQube: 'SonarQube'
        scannerMode: 'MSBuild'
        organization: 'nivz267'
        projectKey: 'nivz267_hello_world'
        projectName: 'hello_world'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        projects: './HelloWorld/HelloWorld.csproj'
      displayName: 'Restore dependencies'

    - script: |
        nuget.exe restore
      displayName: 'Restore packages'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: './HelloWorld/HelloWorld.csproj'
        arguments: '--configuration Release'
      displayName: 'Build project'

    - task: SonarQubeAnalyze@6
      inputs:
        jdkversion: 'JAVA_HOME_21_X64'

    - script: |
        BRANCH_NAME=$(Build.SourceBranchName)
        BUILD_NUMBER=$(Build.BuildId)
        VERSION="$BRANCH_NAME.$BUILD_NUMBER"
        echo "##vso[task.setvariable variable=artifactVersion]$VERSION"
        echo "Tagging the artifact with version $VERSION"
      displayName: 'Tag the Repository with Version'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'pack'
        projects: './HelloWorld/HelloWorld.csproj'
        versioningScheme: 'off' 
        arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory) /p:PackageVersion=$(artifactVersion)'
      displayName: 'Pack project with version $(artifactVersion)'

    - script: |
        nuget.exe push -Source "goofy" -ApiKey az $(Build.ArtifactStagingDirectory)/*.nupkg
      displayName: 'Push NuGet package to Azure Artifacts'

    - script: |
        echo "Artifact Version: $(artifactVersion)"
      displayName: 'Print Artifact Version'

  - job: MainTasks
    displayName: 'Main Branch Tasks: Build, Pack, and Publish Project'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - script: |
        dotnet restore ./HelloWorld/HelloWorld.csproj
      displayName: 'Restore dependencies'

    - script: |
        dotnet build ./HelloWorld/HelloWorld.csproj --configuration Release
      displayName: 'Build Project'

    - script: |
        dotnet pack ./HelloWorld/HelloWorld.csproj --configuration Release --output $(Build.ArtifactStagingDirectory)
      displayName: 'Pack NuGet Package'

    - task: UniversalPackages@0
      displayName: 'Publish Universal Package to Azure Artifacts'
      inputs:
        command: publish
        publishDirectory: '$(Build.ArtifactStagingDirectory)'
        vstsFeedPublish: 'hello_world/goofy'
        vstsFeedPackagePublish: 'helloworld-package'
        versionOption: patch

    - script: |
        echo "Artifact Version: $(Build.BuildId)"
      displayName: 'Print Artifact Version'

    - script: |
        rm -rf $(Build.ArtifactStagingDirectory)
      displayName: 'Clean Up Artifact'
