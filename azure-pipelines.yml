trigger:
  branches:
    include:
      - dev
      - main

pool:
  name: goofy

jobs:
  - job: DevTasks
    displayName: 'Dev Branch Tasks: SonarQube, NuGet, and Publish'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
    steps:
    - checkout: self
      fetchDepth: 0

    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.x'  
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - task: NuGetToolInstaller@1
      displayName: 'Install NuGet Tool'
    
    - task: NuGetAuthenticate@1
      displayName: 'NuGet Authenticate'
      
    - task: SonarQubePrepare@6
      inputs:
        SonarQube: 'YourSonarQubeServiceConnection'  # Your SonarQube connection
        scannerMode: 'MSBuild'
        projectKey: 'nivz267_hello_world'
        projectName: 'hello_world'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        projects: './HelloWorld/HelloWorld.csproj'
      displayName: 'Restore dependencies'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: './HelloWorld/HelloWorld.csproj'
        arguments: '--configuration Release'
      displayName: 'Build project'

    - task: SonarQubeAnalyze@6
      inputs:
        jdkversion: 'JAVA_HOME_21_X64'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'pack'
        projects: '$(project)'
        versioningScheme: 'byBuildNumber' 
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory) /p:PackageId=AzureHelloWorld.$(buildVersion)'
      displayName: 'Pack project with version $(buildVersion)'

    - script: |
        echo "Version: $(buildVersion)"
      displayName: 'Print Version to Console'

    - task: NuGetCommand@2
      inputs:
        command: 'push'
        publishVstsFeed: 'your-feed-id'  # Replace with your actual feed ID
        packageFile: '$(Build.ArtifactStagingDirectory)/*.nupkg'
        versioningScheme: 'byBuildNumber'  # Automatically handle version increment
      displayName: 'Publish NuGet Package to Azure Artifacts'

    - script: |
        VERSION=$(Build.BuildId)  # Or you can calculate a version based on the branch
        TAG_NAME="dev.$VERSION"
        echo "Tagging with: $TAG_NAME"
        git tag $TAG_NAME
        git push origin $TAG_NAME
      displayName: 'Tag the Build with Branch Name and Version'

    - script: |
        echo "Version: $(Build.BuildId)"  # You can extract a more meaningful version from your .csproj if needed
      displayName: 'Print Version to Console'
      
    - task: SendEmail@1
      condition: always()  # Send email on completion regardless of success/failure
      inputs:
        to: 'you@example.com'  # Replace with recipient email
        subject: 'Azure DevOps Pipeline Status: $(Build.DefinitionName) - $(Build.BuildId)'
        body: |
          The pipeline has completed with status: $(Build.Status)
          Build ID: $(Build.BuildId)
          Result: $(Build.Result)
        smtpServer: 'smtp.example.com'  # Set your SMTP server or use an external service
        smtpUser: 'username'  # Your SMTP username
        smtpPassword: 'password'  # Your SMTP password

  - job: MainTasks
    displayName: 'Main Branch Tasks: Build, Pack, and Publish Project'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - script: |
        dotnet restore ./HelloWorld/HelloWorld.csproj
      displayName: 'Restore dependencies'

    - script: |
        dotnet build ./HelloWorld/HelloWorld.csproj --configuration Release
      displayName: 'Build Project'

    - script: |
        dotnet pack ./HelloWorld/HelloWorld.csproj --configuration Release --output $(Build.ArtifactStagingDirectory)
      displayName: 'Pack NuGet Package'

    - task: UniversalPackages@0
      displayName: 'Publish Universal Package to Azure Artifacts'
      inputs:
        command: publish
        publishDirectory: '$(Build.ArtifactStagingDirectory)'
        vstsFeedPublish: 'hello_world/goofy'
        vstsFeedPackagePublish: 'helloworld-package'
        versionOption: patch

    - script: |
        echo "Artifact Version: $(Build.BuildId)"
      displayName: 'Print Artifact Version'

    - script: |
        rm -rf $(Build.ArtifactStagingDirectory)
      displayName: 'Clean Up Artifact'
